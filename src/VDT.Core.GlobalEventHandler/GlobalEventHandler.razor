@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

@code {
    private IJSObjectReference? moduleReference;
    private DotNetObjectReference<GlobalEventHandler>? dotNetObjectReference;

    [Parameter]
    public EventCallback<KeyboardEventArgs> OnKeyDown { get; set; }

    [Parameter]
    public EventCallback<KeyboardEventArgs> OnKeyUp { get; set; }

    [Parameter]
    public EventCallback<ResizeEventArgs> OnResize { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            moduleReference = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/VDT.Core.GlobalEventHandler/globaleventhandler.js");
            dotNetObjectReference = DotNetObjectReference.Create(this);

            await moduleReference.InvokeVoidAsync("register", dotNetObjectReference);
        }
    }

    [JSInvokable]
    public async Task InvokeKeyDown(KeyboardEventArgs args) {
        await OnKeyDown.InvokeAsync(args);
    }

    [JSInvokable]
    public async Task InvokeKeyUp(KeyboardEventArgs args) {
        await OnKeyUp.InvokeAsync(args);
    }

    [JSInvokable]
    public async Task InvokeResize(ResizeEventArgs args) {
        await OnResize.InvokeAsync(args);
    }

    [JSInvokable]
    public async Task InvokeClick(MouseEventArgs args) {
        await OnClick.InvokeAsync(args);
    }

    public async ValueTask DisposeAsync() {
        if (moduleReference != null) {
            await moduleReference.InvokeVoidAsync("unregister", dotNetObjectReference);
            await moduleReference.DisposeAsync();
        }

        dotNetObjectReference?.Dispose();
    }
}
